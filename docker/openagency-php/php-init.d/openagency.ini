; inifie for openagency

[setup]
; To close a service, set service_http_error
; service status - values:
;service_http_error = HTTP/1.0 404 Not Found
;service_http_error = HTTP/1.1 410 Gone
;service_http_error = HTTP/1.0 503 Service Unavailable

; --------------
;version
version = ${VERSION}

; --------------
; set only_https to accept https call only
;only_https = 1

; --------------
; wsdl and service location for service. Used to replace __LOCATION__ in wsdl
wsdl = ${WSDL}

;service location used as endpoint in the wsdl-file. If not set, the actual address/location is used
;service_location = openagency.addi.dk/2.18.1/

; --------------
; in_house_domain may use ?ShowInfo and use create_sample form
;in_house_domain = .dbc.dk

; --------------
; set to TRUE to expose the create_sample form
;show_samples = 1
; show_samples_ip_list = 127.0.0.1

; --------------
; soapActions and their corresponding request structure
; Can be found in the wsdl but is stated here for convenience
soapAction[automation] = automationRequest
soapAction[encryption] = encryptionRequest
soapAction[endUserOrderPolicy] = endUserOrderPolicyRequest
soapAction[findLibrary] = findLibraryRequest
soapAction[getCulrProfile] = getCulrProfileRequest
soapAction[getRegistryInfo] = getRegistryInfoRequest
soapAction[getSaouLicenseInfo] = getSaouLicenseInfoRequest
soapAction[libraryRules] = libraryRulesRequest
soapAction[libraryTypeList] = libraryTypeListRequest
soapAction[nameList] = nameListRequest
soapAction[pickupAgencyList] = pickupAgencyListRequest
soapAction[openSearchProfile] = openSearchProfileRequest
soapAction[remoteAccess] = remoteAccessRequest
soapAction[requestOrder] = requestOrderRequest
soapAction[searchCollection] = searchCollectionRequest
soapAction[service] = serviceRequest
soapAction[showOrder] = showOrderRequest
;soapAction[proxyDomains] = proxyDomainsRequest
;soapAction[proxyIp] = proxyIpRequest

; --------------
; validate
;validate[request] = openagency.xsd
;validate[response] = openagency.xsd

; --------------
; prefixes and namespaces
default_namespace_prefix = ${default_namespace_prefix}
xmlns[oa] = ${xmlns_oa}

; --------------
xmldir = ${XMLDIR}

; --------------
; logfile for verbose output
logfile = ${LOGFILE}

; set verboselevel
;   WARNING - simple warnings
;   ERROR   - errors in response
;   FATAL   - major errors
;   STAT    - Statistical logging
;   TIMER   - timer logging
;   TRACE   - program trace
;   DEBUG   - debugging info
;   Z3959   - calls to z3950 services
;   OCI     - oracle
verbose = ${VERBOSE_LEVEL}

; format for automatic timer dump %s is the operation used
dump_timer = ${DUMP_TIMER}

; --------------
agency_credentials = ${AGENCY_CREDENTIALS}

; --------------
; table for automatic interlibrary loan setting of material owned by the library
; first profile set below, will automatically be default profile
profile_for_own_material[profil_1][age_in_days] = 365
profile_for_own_material[profil_1][limit_in_days] = 14
profile_for_own_material[profil_2][age_in_days] = 0
profile_for_own_material[profil_2][limit_in_days] = 10

; --------------
; Change agencyType for a library
; as of 20150512, 700400 is Folkebibliotek som this is not neeeded any more
;agencyTypeOverride[700400] = Folkebibliotek

; --------------
; DBC target address for order-systems
dbc_target[z3950][address] = ${Z3950_ADDRESS}
dbc_target[iso18626][address] = ${ISO18626_ADDRESS}
dbc_target[iso18626][password] = ${ISO18626_PASSWORD}

; --------------
; memcache - enabling this will cache result for 'cache_expire' seconds
;cache_host = localhost
;cache_port = 11211
;cache_expire = 60
;
; each operation can be set to cache differently by setting cache_operation[operation] specifically
; like:
;   cache_operation_expire[automation] = 600
; the operations can be found in soapAction. 
; if cache_operation_expire is not set for operation(s), the cache_expire above will be used

; ==============

[aaa]
; aaa Authentication, Access control and Accounting
;
; Creates a authentication object from aaa_ip_rights, aaa_fors_rights or aaa_credentials - in that order
;
; Rights can be set here for selected ip-addresses
; aaa_ip_rights[group-identifier][ip_list] = list of ip's
; aaa_ip_rights[group-identifier][ressource][<named ressource>] = right to <named ressource>
; aaa_ip_rights[group-identifier][ressource][<named ressource 2>] = right to <named ressource 2>
;
; Rights for service operations:
; remoteAccess: 550:
; getCulrProfile: 551
; getCulrProfile: 552: requesterIp in request is checked against ip_list below. If rights 552 is found,
;                      settings for CreateProviderId and DeleteProviderId is fetched from the culr profile
;                      (Only trusted clients are allowed to use the two operations)
; all other: 500
aaa_ip_rights[dbc][ip_list] = ${AAA_IP_RIGHTS_IP_LIST}
aaa_ip_rights[dbc][ressource]['netpunkt.dk'] = ${AAA_IP_RIGHTS_RESOURCE_LIST}
;
; if not found in aaa_ip_rights the authentication object is created from the FORS
; either by using the WS specified by aaa_fors_rights or by OCI specified by aaa_credentials
;
; uri for a fors rights webservice - aaa_fors_rights have precedence over aaa_credentials
;aaa_fors_rights = http://forsrights.some.server/?action=forsRights&outputType=php&userIdAut=%s&groupIdAut=%s&passwordAut=%s&ipAddress=%s
;
; oci credentials for FORS server
;aaa_credentials = ora_user/ora_passwd@some.server.dk
;
; memcache server for the authentication object - use localhost in one-webserver environment
;aaa_cache_address = localhost:11211
; number of seconds to cache authentication and access rights info
;aaa_cache_seconds = 3600
;

; ==============

[rest]

; REST parameters for SOAPactions
;
; use xml.path.to.par notation to solve name-conflicts
; action[thisSoapAction][foo][] = some.number
; action[thisSoapAction][bar][] = another.number
; to build
; <thisSoapAction>
;   <foo>
;     <number>nn</number>
;   </foo>
;   <bar>
;     <number>mm</number>
;   </bar>
; </thisSoapAction>
; from url: action=thisSoapAction&some.number=nn&another.number=mm
;
action[automation][authentication][] = groupIdAut
action[automation][authentication][] = passwordAut
action[automation][authentication][] = userIdAut
action[automation][] = agencyId
action[automation][] = autService
action[automation][] = materialType
action[automation][] = callback
action[automation][] = outputType
action[automation][] = trackingId

action[encryption][authentication][] = groupIdAut
action[encryption][authentication][] = passwordAut
action[encryption][authentication][] = userIdAut
action[encryption][] = email
action[encryption][] = callback
action[encryption][] = outputType
action[encryption][] = trackingId

action[endUserOrderPolicy][authentication][] = groupIdAut
action[endUserOrderPolicy][authentication][] = passwordAut
action[endUserOrderPolicy][authentication][] = userIdAut
action[endUserOrderPolicy][] = agencyId
action[endUserOrderPolicy][] = orderMaterialType
action[endUserOrderPolicy][] = ownedByAgency
action[endUserOrderPolicy][] = callback
action[endUserOrderPolicy][] = outputType
action[endUserOrderPolicy][] = trackingId

action[findLibrary][authentication][] = groupIdAut
action[findLibrary][authentication][] = passwordAut
action[findLibrary][authentication][] = userIdAut
action[findLibrary][] = agencyId
action[findLibrary][] = agencyName
action[findLibrary][] = agencyAddress
action[findLibrary][] = postalCode
action[findLibrary][] = city
action[findLibrary][] = stilNumber
action[findLibrary][] = anyField
action[findLibrary][] = libraryType
action[findLibrary][] = libraryStatus
action[findLibrary][] = pickupAllowed
action[findLibrary][] = sort
action[findLibrary][] = callback
action[findLibrary][] = outputType
action[findLibrary][] = trackingId

action[getCulrProfile][authentication][] = groupIdAut
action[getCulrProfile][authentication][] = passwordAut
action[getCulrProfile][authentication][] = userIdAut
action[getCulrProfile][] = agencyId
action[getCulrProfile][] = profileName
action[getCulrProfile][] = requesterIp
action[getCulrProfile][] = callback
action[getCulrProfile][] = outputType
action[getCulrProfile][] = trackingId

action[getRegistryInfo][authentication][] = groupIdAut
action[getRegistryInfo][authentication][] = passwordAut
action[getRegistryInfo][authentication][] = userIdAut
action[getRegistryInfo][] = agencyId
action[getRegistryInfo][] = agencyName
action[getRegistryInfo][] = lastUpdated
action[getRegistryInfo][] = libraryType
action[getRegistryInfo][] = libraryStatus
action[getRegistryInfo][] = callback
action[getRegistryInfo][] = outputType
action[getRegistryInfo][] = trackingId

action[getSaouLicenseInfo][authentication][] = groupIdAut
action[getSaouLicenseInfo][authentication][] = passwordAut
action[getSaouLicenseInfo][authentication][] = userIdAut
action[getSaouLicenseInfo][] = agencyId
action[getSaouLicenseInfo][] = callback
action[getSaouLicenseInfo][] = outputType
action[getSaouLicenseInfo][] = trackingId

action[libraryRules][authentication][] = groupIdAut
action[libraryRules][authentication][] = passwordAut
action[libraryRules][authentication][] = userIdAut
action[libraryRules][] = agencyId
action[libraryRules][] = callback
action[libraryRules][] = outputType
action[libraryRules][] = trackingId

action[libraryTypeList][authentication][] = groupIdAut
action[libraryTypeList][authentication][] = passwordAut
action[libraryTypeList][authentication][] = userIdAut
action[libraryTypeList][] = callback
action[libraryTypeList][] = outputType
action[libraryTypeList][] = trackingId

action[nameList][authentication][] = groupIdAut
action[nameList][authentication][] = passwordAut
action[nameList][authentication][] = userIdAut
action[nameList][] = libraryType
action[nameList][] = callback
action[nameList][] = outputType
action[nameList][] = trackingId

action[pickupAgencyList][authentication][] = groupIdAut
action[pickupAgencyList][authentication][] = passwordAut
action[pickupAgencyList][authentication][] = userIdAut
action[pickupAgencyList][] = agencyId
action[pickupAgencyList][] = agencyName
action[pickupAgencyList][] = agencyAddress
action[pickupAgencyList][] = postalCode
action[pickupAgencyList][] = city
action[pickupAgencyList][] = libraryType
action[pickupAgencyList][] = libraryStatus
action[pickupAgencyList][] = pickupAllowed
action[pickupAgencyList][] = callback
action[pickupAgencyList][] = outputType
action[pickupAgencyList][] = trackingId

action[openSearchProfile][authentication][] = groupIdAut
action[openSearchProfile][authentication][] = passwordAut
action[openSearchProfile][authentication][] = userIdAut
action[openSearchProfile][] = agencyId
action[openSearchProfile][] = profileName
action[openSearchProfile][] = profileVersion
action[openSearchProfile][] = callback
action[openSearchProfile][] = outputType
action[openSearchProfile][] = trackingId

action[remoteAccess][authentication][] = groupIdAut
action[remoteAccess][authentication][] = passwordAut
action[remoteAccess][authentication][] = userIdAut
action[remoteAccess][] = agencyId
action[remoteAccess][] = callback
action[remoteAccess][] = outputType
action[remoteAccess][] = trackingId

action[requestOrder][authentication][] = groupIdAut
action[requestOrder][authentication][] = passwordAut
action[requestOrder][authentication][] = userIdAut
action[requestOrder][] = agencyId
action[requestOrder][] = callback
action[requestOrder][] = outputType
action[requestOrder][] = trackingId

action[searchCollection][authentication][] = groupIdAut
action[searchCollection][authentication][] = passwordAut
action[searchCollection][authentication][] = userIdAut
action[searchCollection][] = agencyId
action[searchCollection][] = callback
action[searchCollection][] = outputType
action[searchCollection][] = trackingId

action[service][authentication][] = groupIdAut
action[service][authentication][] = passwordAut
action[service][authentication][] = userIdAut
action[service][] = agencyId
action[service][] = service
action[service][] = callback
action[service][] = outputType
action[service][] = trackingId

action[showOrder][authentication][] = groupIdAut
action[showOrder][authentication][] = passwordAut
action[showOrder][authentication][] = userIdAut
action[showOrder][] = agencyId
action[showOrder][] = callback
action[showOrder][] = outputType
action[showOrder][] = trackingId

;action[proxyDomains][authentication][] = groupIdAut
;action[proxyDomains][authentication][] = passwordAut
;action[proxyDomains][authentication][] = userIdAut
;action[proxyDomains][] = agencyId
;action[proxyDomains][] = callback
;action[proxyDomains][] = outputType
;action[proxyDomains][] = trackingId

;action[proxyIp][authentication][] = groupIdAut
;action[proxyIp][authentication][] = passwordAut
;action[proxyIp][authentication][] = userIdAut
;action[proxyIp][] = agencyId
;action[proxyIp][] = callback
;action[proxyIp][] = outputType
;action[proxyIp][] = trackingId

; ==============

[showinfo]
; section to dump setting online
; make one or more line to display if ?ShowInfo is part of the url
; __var__ will be replace by the corresponding ini-file setting - if it exists
; __var.section__ will be replace by the corresponding ini-file setting from section [section]
; this will only work if the user from in_house_domain - see above
showinfo[] = <pre>
showinfo[] = version:            __version.setup__
;showinfo[] = logfile:            __logfile.setup__
showinfo[] = verbose:            __verbose__
;showinfo[] = aaa_credentials:    __aaa_credentials__
showinfo[] = show_samples:       __show_samples__
showinfo[] = cache_expire:       __cache_expire__
showinfo[] = cache_operation_expire: __cache_operation_expire__
showinfo[] = </pre>

; ==============

[howru]
test[] = service&agencyId=710100&service=orsItemRequest
preg_match[] = responder>710100<
error[] = ERROR - Cannot find 710100 in VIP
